"use strict";const e=new class{constructor(){this.eventLogs=[],this.suspiciousActivities=[],this.screenshotInterval=null,this.altKeyActive=!1,this.timerInterval=null,this.elapsedTime=0,this.totalExamDuration=null,this.initLockdown(),this.initLogging(),this.enforceFullscreen(),this.startScreenshotCapture(),this.detectWindowSwitching(),this.createNotificationModal(),this.addFullscreenListener(),this.setExamDuration(this.totalExamDuration)}setExamDuration(e){e&&e>0&&(this.totalExamDuration=e,this.startTimerNotification())}createNotificationModal(){if(document.getElementById("notification-modal"))return;const e=document.createElement("div");e.id="notification-modal",e.style.display="none",e.style.position="fixed",e.style.top="50%",e.style.left="50%",e.style.transform="translate(-50%, -50%)",e.style.backgroundColor="#fff",e.style.border="2px solid #333",e.style.borderRadius="12px",e.style.padding="40px",e.style.zIndex="1000",e.style.boxShadow="0px 10px 20px rgba(0, 0, 0, 0.1)",e.style.maxWidth="300px",e.style.width="90%",e.style.minHeight="50px",e.style.overflowY="auto",e.style.transition="all 0.3s ease-in-out";const t=document.createElement("div");t.style.fontSize="20px",t.style.fontWeight="bold",t.style.color="#333",t.style.marginBottom="20px",t.innerText="Alert!",e.appendChild(t);const i=document.createElement("span");i.id="modal-message",i.style.fontSize="18px",i.style.color="#333",i.style.lineHeight="1.5",i.style.marginBottom="20px",e.appendChild(i),document.body.appendChild(e)}showNotification(e){document.getElementById("modal-message").innerText=e;const t=document.getElementById("notification-modal");t.style.display="block",t.style.opacity="0",setTimeout((()=>{t.style.opacity="1"}),10),setTimeout((()=>{t.style.opacity="0",setTimeout((()=>{t.style.display="none"}),300)}),5e3)}notifySuspiciousActivity(e){const t=(new Date).toISOString();this.suspiciousActivities.push({activity:e,timestamp:t}),this.showNotification(`${e}`)}addFullscreenListener(){document.addEventListener("fullscreenchange",(()=>{document.fullscreenElement&&this.startTimerNotification()})),document.addEventListener("webkitfullscreenchange",(()=>{document.webkitFullscreenElement&&this.startTimerNotification()})),document.addEventListener("mozfullscreenchange",(()=>{document.mozFullScreenElement&&this.startTimerNotification()})),document.addEventListener("msfullscreenchange",(()=>{document.msFullscreenElement&&this.startTimerNotification()}))}enforceFullscreen(){console.log("Attempting to enter fullscreen");const e=document.documentElement;e.requestFullscreen?e.requestFullscreen().then((()=>console.log("Fullscreen activated"))).catch((e=>console.error("Failed to activate fullscreen:",e))):e.mozRequestFullScreen?e.mozRequestFullScreen():e.webkitRequestFullscreen?e.webkitRequestFullscreen():e.msRequestFullscreen&&e.msRequestFullscreen()}handleFullscreenChange(){document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||(this.logEvent("Fullscreen exited"),this.notifySuspiciousActivity("Fullscreen exited"),this.enforceFullscreen())}startTimerNotification(){this.totalExamDuration&&this.showNotification(`The exam will be written in ${this.totalExamDuration} minutes.`),this.timerInterval=setInterval((()=>{const e=this.totalExamDuration-this.elapsedTime;e<=0?(clearInterval(this.timerInterval),this.showNotification("Time's up! Exam session has ended.")):(this.showNotification(`You have been writing for ${this.elapsedTime} minutes. ${e} minutes remaining.`),this.elapsedTime++)}),9e5)}detectWindowSwitching(){window.addEventListener("keydown",(e=>{e.altKey&&(this.logEvent("Alt key pressed"),this.notifySuspiciousActivity("You cannot switch tabs during the exam. Please stay on this tab."),e.preventDefault())}))}initLockdown(){document.addEventListener("contextmenu",(e=>{e.preventDefault(),this.logEvent("Right-click blocked"),this.notifySuspiciousActivity("Right-click is disabled during the exam.")})),document.addEventListener("selectstart",(e=>{e.preventDefault(),this.logEvent("Text selection blocked"),this.notifySuspiciousActivity("Text selection is disabled during the exam.")})),document.addEventListener("keydown",(e=>{if(e.ctrlKey||e.metaKey){["c","v","x","s","a"].includes(e.key.toLowerCase())&&(e.preventDefault(),this.logEvent(`Blocked shortcut: ${e.key.toUpperCase()}`),this.notifySuspiciousActivity(`Shortcut ${e.key.toUpperCase()} is disabled during the exam.`))}}))}initLogging(){window.addEventListener("blur",(()=>{this.logEvent("Tab switch or window blur detected"),this.notifySuspiciousActivity("Tab switch detected")})),document.addEventListener("keydown",(e=>{e.altKey&&"Tab"===e.key&&(this.logEvent("Alt+Tab detected"),this.notifySuspiciousActivity("Attempted window/tab switch (Alt+Tab)"))}))}startScreenshotCapture(){this.screenshotInterval=setInterval((()=>{this.captureScreenshot()}),6e5)}captureScreenshot(){navigator.mediaDevices.getDisplayMedia&&navigator.mediaDevices.getUserMedia?navigator.mediaDevices.getDisplayMedia({video:!0}).then((e=>{navigator.mediaDevices.getUserMedia({video:{facingMode:"user"}}).then((t=>{const i=document.createElement("canvas"),s=i.getContext("2d"),n=e.getVideoTracks()[0],o=t.getVideoTracks()[0],a=document.createElement("video"),l=document.createElement("video");a.srcObject=new MediaStream([n]),l.srcObject=new MediaStream([o]),a.onloadedmetadata=()=>{l.onloadedmetadata=()=>{i.width=a.videoWidth,i.height=a.videoHeight+l.videoHeight,s.drawImage(a,0,0,i.width,a.videoHeight),s.drawImage(l,0,a.videoHeight,i.width,l.videoHeight),i.toDataURL("image/png"),this.logEvent("Screenshot captured with screen and face"),e.getTracks().forEach((e=>e.stop())),t.getTracks().forEach((e=>e.stop()))},l.play()},a.play()})).catch((e=>{this.logEvent("Face capture failed"),console.error("Face capture failed:",e)}))})).catch((e=>{this.logEvent("Screen capture failed"),console.error("Screen capture failed:",e)})):(this.logEvent("Screen capture or webcam not supported"),console.error("Screen capture or webcam is not supported by this browser"))}logEvent(e){const t=(new Date).toISOString();this.eventLogs.push({message:e,timestamp:t}),console.log(`[LOG ${t}] ${e}`)}getLogs(){return this.eventLogs}saveToSessionStorage(e,t){sessionStorage.setItem(e,JSON.stringify(t))}generateSessionSummary(){const e={totalEvents:this.eventLogs.length,suspiciousActivities:this.suspiciousActivities,eventLog:this.eventLogs};return console.table(e),e}endSession(){clearInterval(this.screenshotInterval);const e=this.generateSessionSummary();return this.logEvent("Session ended"),e}};module.exports=e;
